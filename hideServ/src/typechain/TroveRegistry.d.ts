/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TroveRegistryInterface extends ethers.utils.Interface {
  functions: {
    "addEntity(uint256,string,uint8,uint8,uint256)": FunctionFragment;
    "createLayer(string,address,address)": FunctionFragment;
    "entities(uint256,uint256)": FunctionFragment;
    "entitiesCounter(uint256)": FunctionFragment;
    "fullfillGeohash(uint256,uint256,string)": FunctionFragment;
    "layers(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addEntity",
    values: [BigNumberish, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLayer",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "entities",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "entitiesCounter",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fullfillGeohash",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "layers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addEntity", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createLayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entities", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "entitiesCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fullfillGeohash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "layers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "EntityAdded(uint256,uint256,string,uint8,uint8)": EventFragment;
    "EntityReady(uint256,uint256,string,uint8,uint8,string,bool,uint256)": EventFragment;
    "NewLayer(string,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EntityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EntityReady"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewLayer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type EntityAddedEvent = TypedEvent<
  [BigNumber, BigNumber, string, number, number] & {
    layerId: BigNumber;
    entityId: BigNumber;
    name: string;
    entityType: number;
    treasureType: number;
  }
>;

export type EntityReadyEvent = TypedEvent<
  [BigNumber, BigNumber, string, number, number, string, boolean, BigNumber] & {
    layerId: BigNumber;
    entityId: BigNumber;
    name: string;
    entityType: number;
    treasureType: number;
    geohash: string;
    status: boolean;
    vaultId: BigNumber;
  }
>;

export type NewLayerEvent = TypedEvent<
  [string, BigNumber, string] & {
    name: string;
    layerId: BigNumber;
    owner: string;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class TroveRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TroveRegistryInterface;

  functions: {
    addEntity(
      layerId: BigNumberish,
      name: string,
      entityType: BigNumberish,
      treasureType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createLayer(
      name: string,
      owner: string,
      prover: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    entities(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, boolean, string, number, BigNumber] & {
        name: string;
        entityType: number;
        status: boolean;
        geohash: string;
        treasureType: number;
        vaultId: BigNumber;
      }
    >;

    entitiesCounter(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _value: BigNumber }>;

    fullfillGeohash(
      layerId: BigNumberish,
      entityId: BigNumberish,
      geohash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    layers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string] & {
        name: string;
        layerId: BigNumber;
        owner: string;
        prover: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addEntity(
    layerId: BigNumberish,
    name: string,
    entityType: BigNumberish,
    treasureType: BigNumberish,
    vaultId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createLayer(
    name: string,
    owner: string,
    prover: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  entities(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, number, boolean, string, number, BigNumber] & {
      name: string;
      entityType: number;
      status: boolean;
      geohash: string;
      treasureType: number;
      vaultId: BigNumber;
    }
  >;

  entitiesCounter(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  fullfillGeohash(
    layerId: BigNumberish,
    entityId: BigNumberish,
    geohash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  layers(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, string] & {
      name: string;
      layerId: BigNumber;
      owner: string;
      prover: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addEntity(
      layerId: BigNumberish,
      name: string,
      entityType: BigNumberish,
      treasureType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createLayer(
      name: string,
      owner: string,
      prover: string,
      overrides?: CallOverrides
    ): Promise<void>;

    entities(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, number, boolean, string, number, BigNumber] & {
        name: string;
        entityType: number;
        status: boolean;
        geohash: string;
        treasureType: number;
        vaultId: BigNumber;
      }
    >;

    entitiesCounter(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fullfillGeohash(
      layerId: BigNumberish,
      entityId: BigNumberish,
      geohash: string,
      overrides?: CallOverrides
    ): Promise<void>;

    layers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, string] & {
        name: string;
        layerId: BigNumber;
        owner: string;
        prover: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EntityAdded(uint256,uint256,string,uint8,uint8)"(
      layerId?: null,
      entityId?: null,
      name?: null,
      entityType?: null,
      treasureType?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, number, number],
      {
        layerId: BigNumber;
        entityId: BigNumber;
        name: string;
        entityType: number;
        treasureType: number;
      }
    >;

    EntityAdded(
      layerId?: null,
      entityId?: null,
      name?: null,
      entityType?: null,
      treasureType?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, number, number],
      {
        layerId: BigNumber;
        entityId: BigNumber;
        name: string;
        entityType: number;
        treasureType: number;
      }
    >;

    "EntityReady(uint256,uint256,string,uint8,uint8,string,bool,uint256)"(
      layerId?: null,
      entityId?: null,
      name?: null,
      entityType?: null,
      treasureType?: null,
      geohash?: null,
      status?: null,
      vaultId?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        string,
        number,
        number,
        string,
        boolean,
        BigNumber
      ],
      {
        layerId: BigNumber;
        entityId: BigNumber;
        name: string;
        entityType: number;
        treasureType: number;
        geohash: string;
        status: boolean;
        vaultId: BigNumber;
      }
    >;

    EntityReady(
      layerId?: null,
      entityId?: null,
      name?: null,
      entityType?: null,
      treasureType?: null,
      geohash?: null,
      status?: null,
      vaultId?: null
    ): TypedEventFilter<
      [
        BigNumber,
        BigNumber,
        string,
        number,
        number,
        string,
        boolean,
        BigNumber
      ],
      {
        layerId: BigNumber;
        entityId: BigNumber;
        name: string;
        entityType: number;
        treasureType: number;
        geohash: string;
        status: boolean;
        vaultId: BigNumber;
      }
    >;

    "NewLayer(string,uint256,address)"(
      name?: null,
      layerId?: null,
      owner?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { name: string; layerId: BigNumber; owner: string }
    >;

    NewLayer(
      name?: null,
      layerId?: null,
      owner?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { name: string; layerId: BigNumber; owner: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    addEntity(
      layerId: BigNumberish,
      name: string,
      entityType: BigNumberish,
      treasureType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createLayer(
      name: string,
      owner: string,
      prover: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    entities(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    entitiesCounter(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fullfillGeohash(
      layerId: BigNumberish,
      entityId: BigNumberish,
      geohash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    layers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addEntity(
      layerId: BigNumberish,
      name: string,
      entityType: BigNumberish,
      treasureType: BigNumberish,
      vaultId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createLayer(
      name: string,
      owner: string,
      prover: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    entities(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    entitiesCounter(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fullfillGeohash(
      layerId: BigNumberish,
      entityId: BigNumberish,
      geohash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    layers(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
