{
  "address": "0x2E21EFf44163d060b5357603AF2F13B3fa459A6c",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ITroveRegistry",
          "name": "_registry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "nftContract",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "contractStandard",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "NewTreasure",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1c8fd727e87454c3317c140adcb991c94b73ad9a4cef94997fb53dd5b81214d4",
  "receipt": {
    "to": null,
    "from": "0x7084C8A2943df2115C4Ca9b70ce6b963A5993906",
    "contractAddress": "0x2E21EFf44163d060b5357603AF2F13B3fa459A6c",
    "transactionIndex": 5,
    "gasUsed": "915432",
    "logsBloom": "0x000000000000000000000000000000000000000000000000008000000000000000000000000000800000000000000000000080000000000000000000000000000000000000000000000000000000008000010000000000000001000000000040000000000200000000000000000008000000000000000000800000000000004000000000000000000000000000000000000000000000800000000000000000002000000000000000000000000000000000000000000000000000000000000040000000000000000000010000000000000000400000000000001000400000a0010004000000000000040000000000000000000000000000000000000000100000",
    "blockHash": "0x0eaeba2af64453d6bce94860cb6e120ea4a5eb8fb4ccfb13db6633bb877197a6",
    "transactionHash": "0x1c8fd727e87454c3317c140adcb991c94b73ad9a4cef94997fb53dd5b81214d4",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 24665046,
        "transactionHash": "0x1c8fd727e87454c3317c140adcb991c94b73ad9a4cef94997fb53dd5b81214d4",
        "address": "0x2E21EFf44163d060b5357603AF2F13B3fa459A6c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000007084c8a2943df2115c4ca9b70ce6b963a5993906"
        ],
        "data": "0x",
        "logIndex": 10,
        "blockHash": "0x0eaeba2af64453d6bce94860cb6e120ea4a5eb8fb4ccfb13db6633bb877197a6"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 24665046,
        "transactionHash": "0x1c8fd727e87454c3317c140adcb991c94b73ad9a4cef94997fb53dd5b81214d4",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000007084c8a2943df2115c4ca9b70ce6b963a5993906",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000681293dce70f00000000000000000000000000000000000000000000000001761a8f96c2edbac000000000000000000000000000000000000000000000656bd489e15e9f3828e000000000000000000000000000000000000000000000000175b27d02e606abc000000000000000000000000000000000000000000000656bd4f1f3f27c1f37e",
        "logIndex": 11,
        "blockHash": "0x0eaeba2af64453d6bce94860cb6e120ea4a5eb8fb4ccfb13db6633bb877197a6"
      }
    ],
    "blockNumber": 24665046,
    "cumulativeGasUsed": "1530866",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x685C50f23384fEc27e1AD5B44F9cfe7835299067"
  ],
  "numDeployments": 1,
  "solcInputHash": "acb1698faec19b88ece0b8abdd0a039b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITroveRegistry\",\"name\":\"_registry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"nftContract\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contractStandard\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"NewTreasure\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"custom:security-contact\":\"alex@homebox.ie\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Trove/TroveVault.sol\":\"TroveVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"src/Trove/TroveVault.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\npragma solidity 0.8.7;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n// import \\\"@openzeppelin/contracts/token/ERC1155/ERC1155Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n// import { ERC1155Receiver } from \\\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/utils/ERC1155Receiver.sol\\\";\\n// import { IERC1155 } from \\\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { ITroveRegistry } from \\\"./interface/ITroveRegistry.sol\\\";\\n\\n/// @custom:security-contact alex@homebox.ie\\n\\n// contract TroveVault is Ownable, IERC721Receiver, ERC1155Receiver  {\\n  contract TroveVault is Ownable, IERC721Receiver  {\\n\\n   ITroveRegistry private registry;\\n\\n   constructor (ITroveRegistry _registry) {\\n       registry = _registry;\\n   }\\n\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _tokenIdCounter;\\n  \\n    mapping (uint256 => TreasureDetails) treasureDetails;\\n\\n    struct TreasureDetails {\\n        string contractStandard;\\n        IERC721 ERC721contract;\\n        IERC1155 ERC1155contract;\\n        uint256 value;\\n        address source;\\n        uint256 tokenId;\\n    }\\n\\n    \\n    event NewTreasure(address nftContract, uint256 tokenId, string contractStandard, uint256 value);\\n\\n\\n    function onERC721Received(address, address from, uint256 tokenId, bytes calldata) public virtual override returns (bytes4) {\\n     uint256 treasureId = _tokenIdCounter.current();\\n     \\n     address tokenOwner = IERC721(msg.sender).ownerOf(tokenId);\\n     require(tokenOwner == address(this), \\\"Not a real transfer\\\");\\n     \\n       treasureDetails[treasureId] = TreasureDetails({\\n            contractStandard: \\\"ERC721\\\",\\n            ERC721contract: IERC721(0x0000000000000000000000000000000000000000),\\n            ERC1155contract: IERC1155(msg.sender),\\n            value: 1,\\n            source: from,\\n            tokenId: tokenId\\n        });\\n\\n        registry.addEntity(0, \\\"TreasureNFT\\\", ITroveRegistry.EntityType.TREASURE, ITroveRegistry.TreasureType.VAULT, treasureId);\\n\\n        emit NewTreasure(msg.sender, treasureId, \\\"ERC721\\\", 1);\\n\\n        _tokenIdCounter.increment();\\n        return this.onERC721Received.selector;\\n    }\\n    \\n    //   function onERC1155Received(address operator, address from, uint256 tokenId, uint256 value, bytes calldata data) external override returns(bytes4) {\\n    //         uint256 treasureId = _tokenIdCounter.current();\\n    //         address tokenOwner = IERC721(msg.sender).ownerOf(tokenId);\\n    //         require(tokenOwner == address(this), \\\"Not a real transfer\\\");\\n    //       treasureDetails[treasureId] = TreasureDetails({\\n    //         contractStandard: \\\"ERC1155\\\",\\n    //         ERC721contract: IERC721(0x0000000000000000000000000000000000000000),\\n    //         ERC1155contract: IERC1155(msg.sender),\\n    //         value: value,\\n    //         source: from,\\n    //         tokenId: tokenId\\n    //     });\\n    //     emit NewTreasure(msg.sender, treasureId, \\\"ERC1155\\\", value);\\n    //     _tokenIdCounter.increment();\\n\\n    //     return this.onERC1155BatchReceived.selector;\\n    //     }\\n\\n    // function onERC1155BatchReceived(address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external override returns(bytes4) {\\n    //         return this.onERC1155BatchReceived.selector;\\n    //     }\\n} \",\"keccak256\":\"0xe1168461c8c00772bc40850f110f52043a2e6a4f980030ace8c824725106cc62\",\"license\":\"AGPL-1.0\"},\"src/Trove/interface/ITroveRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-1.0\\n/// @custom:security-contact alex@homebox.ie\\npragma solidity 0.8.7;\\n\\ninterface ITroveRegistry {\\n    \\n    enum EntityType{ TREASURE, SHOWCASE, CUSTOM }\\n    enum TreasureType{ VAULT, MINTABLE }\\n\\n    function addEntity(uint256 layerId, string calldata name, EntityType entityType, TreasureType treasureType, uint256 vaultId) external ;\\n\\n}\",\"keccak256\":\"0xd5c8ee0410ba54321ecd5259822746590d20b8e1d2ede9125102b0b9ae687a92\",\"license\":\"AGPL-1.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620010d9380380620010d9833981810160405281019062000037919062000182565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200021b565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000815190506200017c8162000201565b92915050565b6000602082840312156200019b576200019a620001fc565b5b6000620001ab848285016200016b565b91505092915050565b6000620001c182620001dc565b9050919050565b6000620001d582620001b4565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6200020c81620001c8565b81146200021857600080fd5b50565b610eae806200022b6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063150b7a0214610051578063715018a6146100815780638da5cb5b1461008b578063f2fde38b146100a9575b600080fd5b61006b600480360381019061006691906108ac565b6100c5565b6040516100789190610ab1565b60405180910390f35b610089610481565b005b610093610509565b6040516100a09190610a4c565b60405180910390f35b6100c360048036038101906100be9190610852565b610532565b005b6000806100d2600261062a565b905060003373ffffffffffffffffffffffffffffffffffffffff16636352211e876040518263ffffffff1660e01b815260040161010f9190610b84565b60206040518083038186803b15801561012757600080fd5b505afa15801561013b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015f919061087f565b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146101cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c690610b44565b60405180910390fd5b6040518060c001604052806040518060400160405280600681526020017f45524337323100000000000000000000000000000000000000000000000000008152508152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600181526020018873ffffffffffffffffffffffffffffffffffffffff168152602001878152506003600084815260200190815260200160002060008201518160000190805190602001906102a492919061071a565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050155905050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a2fecb866000806000866040518563ffffffff1660e01b81526004016103f49493929190610acc565b600060405180830381600087803b15801561040e57600080fd5b505af1158015610422573d6000803e3d6000fd5b505050507f664e30c25d6198e96472436c3f622528b38c2cc567161320a3990d048b338b593383600160405161045a93929190610a67565b60405180910390a161046c6002610638565b63150b7a0260e01b9250505095945050505050565b61048961064e565b73ffffffffffffffffffffffffffffffffffffffff166104a7610509565b73ffffffffffffffffffffffffffffffffffffffff16146104fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f490610b64565b60405180910390fd5b6105076000610656565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61053a61064e565b73ffffffffffffffffffffffffffffffffffffffff16610558610509565b73ffffffffffffffffffffffffffffffffffffffff16146105ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a590610b64565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561061e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061590610b24565b60405180910390fd5b61062781610656565b50565b600081600001549050919050565b6001816000016000828254019250508190555050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805461072690610c86565b90600052602060002090601f016020900481019282610748576000855561078f565b82601f1061076157805160ff191683800117855561078f565b8280016001018555821561078f579182015b8281111561078e578251825591602001919060010190610773565b5b50905061079c91906107a0565b5090565b5b808211156107b95760008160009055506001016107a1565b5090565b6000813590506107cc81610e4a565b92915050565b6000815190506107e181610e4a565b92915050565b60008083601f8401126107fd576107fc610d1b565b5b8235905067ffffffffffffffff81111561081a57610819610d16565b5b60208301915083600182028301111561083657610835610d20565b5b9250929050565b60008135905061084c81610e61565b92915050565b60006020828403121561086857610867610d2a565b5b6000610876848285016107bd565b91505092915050565b60006020828403121561089557610894610d2a565b5b60006108a3848285016107d2565b91505092915050565b6000806000806000608086880312156108c8576108c7610d2a565b5b60006108d6888289016107bd565b95505060206108e7888289016107bd565b94505060406108f88882890161083d565b935050606086013567ffffffffffffffff81111561091957610918610d25565b5b610925888289016107e7565b92509250509295509295909350565b61093d81610bb0565b82525050565b61094c81610bc2565b82525050565b61095b81610c3e565b82525050565b61096a81610c50565b82525050565b61097981610c62565b82525050565b61098881610c74565b82525050565b600061099b600b83610b9f565b91506109a682610d2f565b602082019050919050565b60006109be602683610b9f565b91506109c982610d58565b604082019050919050565b60006109e1600683610b9f565b91506109ec82610da7565b602082019050919050565b6000610a04601383610b9f565b9150610a0f82610dd0565b602082019050919050565b6000610a27602083610b9f565b9150610a3282610df9565b602082019050919050565b610a4681610c34565b82525050565b6000602082019050610a616000830184610934565b92915050565b6000608082019050610a7c6000830186610934565b610a896020830185610a3d565b8181036040830152610a9a816109d4565b9050610aa9606083018461097f565b949350505050565b6000602082019050610ac66000830184610943565b92915050565b600060a082019050610ae16000830187610970565b8181036020830152610af28161098e565b9050610b016040830186610952565b610b0e6060830185610961565b610b1b6080830184610a3d565b95945050505050565b60006020820190508181036000830152610b3d816109b1565b9050919050565b60006020820190508181036000830152610b5d816109f7565b9050919050565b60006020820190508181036000830152610b7d81610a1a565b9050919050565b6000602082019050610b996000830184610a3d565b92915050565b600082825260208201905092915050565b6000610bbb82610c14565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050610bfc82610e22565b919050565b6000819050610c0f82610e36565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c4982610bee565b9050919050565b6000610c5b82610c01565b9050919050565b6000610c6d82610c34565b9050919050565b6000610c7f82610c34565b9050919050565b60006002820490506001821680610c9e57607f821691505b60208210811415610cb257610cb1610ce7565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b7f54726561737572654e4654000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732310000000000000000000000000000000000000000000000000000600082015250565b7f4e6f742061207265616c207472616e7366657200000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60038110610e3357610e32610cb8565b5b50565b60028110610e4757610e46610cb8565b5b50565b610e5381610bb0565b8114610e5e57600080fd5b50565b610e6a81610c34565b8114610e7557600080fd5b5056fea26469706673582212209c76388b0a76f82de2f9432b3cd8ddf97732fbfaf94a1aea13f967b6ecf8046964736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063150b7a0214610051578063715018a6146100815780638da5cb5b1461008b578063f2fde38b146100a9575b600080fd5b61006b600480360381019061006691906108ac565b6100c5565b6040516100789190610ab1565b60405180910390f35b610089610481565b005b610093610509565b6040516100a09190610a4c565b60405180910390f35b6100c360048036038101906100be9190610852565b610532565b005b6000806100d2600261062a565b905060003373ffffffffffffffffffffffffffffffffffffffff16636352211e876040518263ffffffff1660e01b815260040161010f9190610b84565b60206040518083038186803b15801561012757600080fd5b505afa15801561013b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015f919061087f565b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146101cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c690610b44565b60405180910390fd5b6040518060c001604052806040518060400160405280600681526020017f45524337323100000000000000000000000000000000000000000000000000008152508152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001600181526020018873ffffffffffffffffffffffffffffffffffffffff168152602001878152506003600084815260200190815260200160002060008201518160000190805190602001906102a492919061071a565b5060208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506060820151816003015560808201518160040160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060a08201518160050155905050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a2fecb866000806000866040518563ffffffff1660e01b81526004016103f49493929190610acc565b600060405180830381600087803b15801561040e57600080fd5b505af1158015610422573d6000803e3d6000fd5b505050507f664e30c25d6198e96472436c3f622528b38c2cc567161320a3990d048b338b593383600160405161045a93929190610a67565b60405180910390a161046c6002610638565b63150b7a0260e01b9250505095945050505050565b61048961064e565b73ffffffffffffffffffffffffffffffffffffffff166104a7610509565b73ffffffffffffffffffffffffffffffffffffffff16146104fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f490610b64565b60405180910390fd5b6105076000610656565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61053a61064e565b73ffffffffffffffffffffffffffffffffffffffff16610558610509565b73ffffffffffffffffffffffffffffffffffffffff16146105ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a590610b64565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561061e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061590610b24565b60405180910390fd5b61062781610656565b50565b600081600001549050919050565b6001816000016000828254019250508190555050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805461072690610c86565b90600052602060002090601f016020900481019282610748576000855561078f565b82601f1061076157805160ff191683800117855561078f565b8280016001018555821561078f579182015b8281111561078e578251825591602001919060010190610773565b5b50905061079c91906107a0565b5090565b5b808211156107b95760008160009055506001016107a1565b5090565b6000813590506107cc81610e4a565b92915050565b6000815190506107e181610e4a565b92915050565b60008083601f8401126107fd576107fc610d1b565b5b8235905067ffffffffffffffff81111561081a57610819610d16565b5b60208301915083600182028301111561083657610835610d20565b5b9250929050565b60008135905061084c81610e61565b92915050565b60006020828403121561086857610867610d2a565b5b6000610876848285016107bd565b91505092915050565b60006020828403121561089557610894610d2a565b5b60006108a3848285016107d2565b91505092915050565b6000806000806000608086880312156108c8576108c7610d2a565b5b60006108d6888289016107bd565b95505060206108e7888289016107bd565b94505060406108f88882890161083d565b935050606086013567ffffffffffffffff81111561091957610918610d25565b5b610925888289016107e7565b92509250509295509295909350565b61093d81610bb0565b82525050565b61094c81610bc2565b82525050565b61095b81610c3e565b82525050565b61096a81610c50565b82525050565b61097981610c62565b82525050565b61098881610c74565b82525050565b600061099b600b83610b9f565b91506109a682610d2f565b602082019050919050565b60006109be602683610b9f565b91506109c982610d58565b604082019050919050565b60006109e1600683610b9f565b91506109ec82610da7565b602082019050919050565b6000610a04601383610b9f565b9150610a0f82610dd0565b602082019050919050565b6000610a27602083610b9f565b9150610a3282610df9565b602082019050919050565b610a4681610c34565b82525050565b6000602082019050610a616000830184610934565b92915050565b6000608082019050610a7c6000830186610934565b610a896020830185610a3d565b8181036040830152610a9a816109d4565b9050610aa9606083018461097f565b949350505050565b6000602082019050610ac66000830184610943565b92915050565b600060a082019050610ae16000830187610970565b8181036020830152610af28161098e565b9050610b016040830186610952565b610b0e6060830185610961565b610b1b6080830184610a3d565b95945050505050565b60006020820190508181036000830152610b3d816109b1565b9050919050565b60006020820190508181036000830152610b5d816109f7565b9050919050565b60006020820190508181036000830152610b7d81610a1a565b9050919050565b6000602082019050610b996000830184610a3d565b92915050565b600082825260208201905092915050565b6000610bbb82610c14565b9050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050610bfc82610e22565b919050565b6000819050610c0f82610e36565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610c4982610bee565b9050919050565b6000610c5b82610c01565b9050919050565b6000610c6d82610c34565b9050919050565b6000610c7f82610c34565b9050919050565b60006002820490506001821680610c9e57607f821691505b60208210811415610cb257610cb1610ce7565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b7f54726561737572654e4654000000000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732310000000000000000000000000000000000000000000000000000600082015250565b7f4e6f742061207265616c207472616e7366657200000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60038110610e3357610e32610cb8565b5b50565b60028110610e4757610e46610cb8565b5b50565b610e5381610bb0565b8114610e5e57600080fd5b50565b610e6a81610c34565b8114610e7557600080fd5b5056fea26469706673582212209c76388b0a76f82de2f9432b3cd8ddf97732fbfaf94a1aea13f967b6ecf8046964736f6c63430008070033",
  "devdoc": {
    "custom:security-contact": "alex@homebox.ie",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "src/Trove/TroveVault.sol:TroveVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2303,
        "contract": "src/Trove/TroveVault.sol:TroveVault",
        "label": "registry",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITroveRegistry)2467"
      },
      {
        "astId": 2321,
        "contract": "src/Trove/TroveVault.sol:TroveVault",
        "label": "_tokenIdCounter",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(Counter)1621_storage"
      },
      {
        "astId": 2326,
        "contract": "src/Trove/TroveVault.sol:TroveVault",
        "label": "treasureDetails",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(TreasureDetails)2341_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IERC1155)226": {
        "encoding": "inplace",
        "label": "contract IERC1155",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)1251": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_contract(ITroveRegistry)2467": {
        "encoding": "inplace",
        "label": "contract ITroveRegistry",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_struct(TreasureDetails)2341_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TroveVault.TreasureDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(TreasureDetails)2341_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1621_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1620,
            "contract": "src/Trove/TroveVault.sol:TroveVault",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(TreasureDetails)2341_storage": {
        "encoding": "inplace",
        "label": "struct TroveVault.TreasureDetails",
        "members": [
          {
            "astId": 2328,
            "contract": "src/Trove/TroveVault.sol:TroveVault",
            "label": "contractStandard",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2331,
            "contract": "src/Trove/TroveVault.sol:TroveVault",
            "label": "ERC721contract",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC721)1251"
          },
          {
            "astId": 2334,
            "contract": "src/Trove/TroveVault.sol:TroveVault",
            "label": "ERC1155contract",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(IERC1155)226"
          },
          {
            "astId": 2336,
            "contract": "src/Trove/TroveVault.sol:TroveVault",
            "label": "value",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2338,
            "contract": "src/Trove/TroveVault.sol:TroveVault",
            "label": "source",
            "offset": 0,
            "slot": "4",
            "type": "t_address"
          },
          {
            "astId": 2340,
            "contract": "src/Trove/TroveVault.sol:TroveVault",
            "label": "tokenId",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}