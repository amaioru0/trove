/**
 * Load redis lua scripts.
 * The name of the script must have the following format:
 *
 * cmdName-numKeys.lua
 *
 * cmdName must be in camel case format.
 *
 * For example:
 * moveToFinish-3.lua
 *
 */
'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.load = void 0;
const lodash_1 = require("lodash");
const path = require("path");
const fs = require("fs");
const util = require("util");
const readdir = util.promisify(fs.readdir);
const readFile = util.promisify(fs.readFile);
const exists = util.promisify(fs.exists);
exports.load = async function (client, pathname) {
    const scripts = await loadScripts(pathname);
    scripts.forEach((command) => {
        // Only define the command if not already defined
        if (!client[command.name]) {
            client.defineCommand(command.name, command.options);
        }
    });
};
async function loadScripts(dir) {
    const files = await readdir(dir);
    const includes = {};
    const includesDir = path.join(dir, 'includes');
    if (await exists(includesDir)) {
        const includesFiles = await readdir(includesDir);
        for (let i = 0; i < includesFiles.length; i++) {
            const file = includesFiles[i];
            const lua = await readFile(path.join(includesDir, file));
            const name = path.basename(file, '.lua');
            includes[name] = lua.toString();
        }
    }
    const luaFiles = files.filter((file) => path.extname(file) === '.lua');
    if (luaFiles.length === 0) {
        /**
         * To prevent unclarified runtime error "updateDelayset is not a function
         * @see https://github.com/OptimalBits/bull/issues/920
         */
        throw new Error('No .lua files found!');
    }
    const commands = [];
    for (let i = 0; i < luaFiles.length; i++) {
        const file = luaFiles[i];
        if (path.extname(file) === '.lua') {
            const longName = path.basename(file, '.lua');
            const name = longName.split('-')[0];
            const numberOfKeys = parseInt(longName.split('-')[1]);
            const lua = (await readFile(path.join(dir, file))).toString();
            const compiled = lodash_1.template(lua);
            commands.push({
                name,
                options: { numberOfKeys, lua: compiled(includes) },
            });
        }
    }
    return commands;
}
//# sourceMappingURL=index.js.map